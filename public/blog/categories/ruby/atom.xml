<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Yet Another Kinopyo Blog]]></title>
  <link href="http://kinopyo.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kinopyo.github.com/"/>
  <updated>2012-08-29T01:53:12+09:00</updated>
  <id>http://kinopyo.github.com/</id>
  <author>
    <name><![CDATA[Qihuan Piao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails RSpec: Postgresqlでrake specするとNOTICEの警告がいっぱい出た]]></title>
    <link href="http://kinopyo.github.com/blog/rails-rspec-postgresql-turn-offrake-spec-warnings-notice"/>
    <updated>2012-03-29T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/rails-rspec-postgresql-turn-offrake-spec-warnings-notice</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/arcright/20110623/1308796154">PostgresSQLでrake specするとNOTICEがいっぱいでる</a>が大変参考になった。</p>

<p>{% blockquote  %}
NOTICE:  CREATE TABLE will create implicit sequence "peroperos_id_seq" for serial column "peroperos.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "peroperos_pkey" for table "peroperos"
～略～
{% endblockquote %}
の警告をシャットダウンする方法です。</p>

<p>{% gist 2232851 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsテスト時のrack警告"warning: regexp match /.../n against to UTF-8 string"を消す方法]]></title>
    <link href="http://kinopyo.github.com/blog/rails-test-quietrack-warning"/>
    <updated>2012-03-23T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/rails-test-quietrack-warning</id>
    <content type="html"><![CDATA[<p>Rails 3.1以前のバージョンなら多分テスト実行時にこういう警告が出ることがあるかもしれません。
{% codeblock %}
gems/rack-1.2.5/lib/rack/utils.rb:16: warning: regexp match /.../n against to UTF-8 string
{% endcodeblock %}
このうるさい警告を消す方法を紹介します。</p>

<h2>解決方法</h2>

<p>rspecを使う場合はspec/spec_helper.rbに下記コードを最後に追記してください。
{% gist 2168152 %}</p>

<h2>原因</h2>

<p>Rack1.3からは解決できたらしいですが、Rails 3.1以前を使うならとりあえずこの方法で回避してもいいかと。
詳しくは：<a href="https://github.com/rack/rack/issues/41">https://github.com/rack/rack/issues/41</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FactoryGirl: How to define a value based on an already defined one]]></title>
    <link href="http://kinopyo.github.com/blog/factorygirl-how-to-define-a-value-based-on-an-already-defined-one"/>
    <updated>2012-01-26T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/factorygirl-%e6%97%a2%e3%81%ab%e5%ae%9a%e7%be%a9%e3%81%97%e3%81%9f%e5%80%a4%e3%82%92%e3%83%99%e3%83%bc%e3%82%b9%e3%81%ab%e3%81%97%e3%81%9f%e5%80%a4%e3%82%92%e8%a8%ad%e5%ae%9a%e3%81%99%e3%82%8b</id>
    <content type="html"><![CDATA[<p>FactoryGirlで既に定義した値を使おうとする時の方法です。
例えばLessonというクラスのstart_atとend_atの属性があり、start_atを定義した後はend_atをその2時間後に定義したい場合、ブロックでパラメータを渡せばそこでstart_atにアクセスできるようになります。</p>

<p>{% gist 1680766 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby how to encode url]]></title>
    <link href="http://kinopyo.github.com/blog/ruby-url-encode"/>
    <updated>2011-12-08T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/ruby-url-encode</id>
    <content type="html"><![CDATA[<p>{% gist 1445867 %}</p>

<h1>日本語</h1>

<p>{% gist 1445867 %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Append class if condition is true in Haml ]]></title>
    <link href="http://kinopyo.github.com/blog/rails-append-class-if-condition-is-true-in-haml"/>
    <updated>2011-11-22T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/rails-append-class-if-condition-is-true-in-haml</id>
    <content type="html"><![CDATA[<p><em>blackbirdpie url="http://twitter.com/#!/fantasyday/status/138923631433625600"</em></p>

<pre class=''>
.post{:class => ("gray" unless post.published?)}

{% endcodeblock %}

# 日本語

*blackbirdpie url="http://twitter.com/#!/fantasyday/status/138923631433625600"*

HAMLである条件がtrueの時だけあるclassをタグに追加したい場合
{% codeblock %}

.post{:class => ("gray" unless post.published?)}
{% endcodeblock %}

]]></content>
  </entry>
  
</feed>
