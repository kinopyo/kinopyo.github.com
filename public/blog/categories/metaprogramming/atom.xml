<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: metaprogramming | Yet Another Kinopyo Blog]]></title>
  <link href="http://kinopyo.com/blog/categories/metaprogramming/atom.xml" rel="self"/>
  <link href="http://kinopyo.com/"/>
  <updated>2012-09-29T21:21:12+09:00</updated>
  <id>http://kinopyo.com/</id>
  <author>
    <name><![CDATA[Qihuan Piao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby instance_eval()の解説、Rails ActiveRecordとActiveSupportでの応用例]]></title>
    <link href="http://kinopyo.com/blog/ruby-instance_eval-and-how-used-in-rails-active-record-and-active-support"/>
    <updated>2011-09-12T00:00:00+09:00</updated>
    <id>http://kinopyo.com/blog/ruby-instance_eval-and-how-used-in-rails-active-record-and-active-support</id>
    <content type="html"><![CDATA[<p>下記ソースコードに英語コメントで書いてますが、日本語で解釈してみます。</p>

<p><div><script src='https://gist.github.com/3528653.js?file=instance_eval.rb'></script>
<noscript><pre><code># Object#instance_eval()
p Object.instance_methods.grep(/instance_eval/)

# evaluates a block in the context of an someoneect
# (the block is evaluated with the receiver as self, 
# so it can access the receiver's private methods and instance variables)
# it leaves all the other bindings alone

class Person
  def initialize(name)
    @name = name
  end
  
  private
  def credit_card
    &quot;My credit card number is...&quot;
  end
end
   
outter_val = &quot;Tom&quot;

someone = Person.new(&quot;Bob&quot;)
someone.instance_eval do
  # self became someone(an instance of Person)
  self  # =&gt; #&lt;Person:0x007fa4e3843ca0 @name=&quot;Bob&quot;&gt;
  self == someone # =&gt; true
  
  # access to the instance variable
  @name  # =&gt; &quot;Bob&quot;
  
  # call the private method
  credit_card # =&gt; &quot;My credit card number is...&quot;
  
  # access the outter variable
  @name = outter_val  # =&gt; &quot;Tom&quot;
  
end</code></pre></noscript></div>
</p>

<h2>定義</h2>

<p>まずinstance_evalはObjectのインスタンスメソッドです。なので全てのオブジェクトがこのinstance_evalを呼び出すことができます。instance_evalはブロックを受け取ります。</p>

<h2>機能</h2>

<ul>
<li>呼び出すオブジェクト(receiver)のスコープ内でブロックを評価(実行)する、つまりreceiverのプライベートメソッドやインスタンス変数にアクセスできること</li>
<li>現在スコープの変数などBindingにアクセスできる</li>
</ul>


<p>サンプルコードではPersonというclassに@nameのインスタンス変数、credit_cardというプライベートメソッドを定義しました。</p>

<p>someoneはPersonのインスタンスで、someoneからinstance_evalをコールすると、そのブロック内ではselfがsomeoneとなり、@nameやcredit_cardにアクセスできます。</p>

<p>さらにinstance_evalの外で定義した変数outter_valにもアクセスできます。</p>

<h2>Real-life example</h2>

<p>さて、原理は分かったとして、実際はどのように使われているのか、Railsのソースコードでgrepしてこんなコードが見つかりました。</p>

<h3>in ActiveRecord</h3>

<p>まずマイグレーションでまあよく使うchange_columnメソッドのソースコードです。</p>

<p><div><script src='https://gist.github.com/3528653.js?file=instance_eval_in_rails_active_record.rb'></script>
<noscript><pre><code>def change_column(table_name, column_name, type, options = {}) #:nodoc:
  alter_table(table_name) do |definition|
    include_default = options_include_default?(options)
    definition[column_name].instance_eval do
      self.type    = type
      self.limit   = options[:limit] if options.include?(:limit)
      self.default = options[:default] if include_default
      self.null    = options[:null] if options.include?(:null)
    end
  end
end</code></pre></noscript></div>
</p>

<p><code>definition[column_name]</code>がinstance_evalを呼び出したのですが、definition[column_name]はActiveRecord::ConnectionAdapters::ColumnDefinitionクラスのオブジェクトで、ColumnDefinitionの実態はStructを継承し、カラムの名前、種類、limit、precision、デフォルト値などの情報が格納されているオブジェクトです。</p>

<p><div><script src='https://gist.github.com/3528653.js?file=column_definition.rb'></script>
<noscript><pre><code>class ColumnDefinition &lt; Struct.new(:base, :name, :type, :limit, :precision, :scale, :default, :null)</code></pre></noscript></div>
</p>

<p>definition[column_name].instance_evalを使うことで、そのオブジェクト(テーブルカラム)の種類、limit、default値とnull可否を変更することが分かりましたね。
optionsはinstance_evalブロックの外の変数ですが、普通にアクセスできます。</p>

<h3>in ActiveSupport</h3>

<p><div><script src='https://gist.github.com/3528653.js?file=instance_eval_in_rails_active_support.rb'></script>
<noscript><pre><code>class Time
  class &lt;&lt; self
    alias_method :_load_without_utc_flag, :_load
    def _load(marshaled_time)
      time = _load_without_utc_flag(marshaled_time)
      time.instance_eval do
        if defined?(@marshal_with_utc_coercion)
          val = remove_instance_variable(&quot;@marshal_with_utc_coercion&quot;)
        end
        val ? utc : self
      end
    end
  end
end</code></pre></noscript></div>
</p>

<p>上記ActiveRecordのコードが分かればここは分かりやすいと思います。
実際の意味はさておき、instance_evalを利用して@marshal_with_utc_coercionというインスタンス変数が定義されていれば、それを削除する使い方ですね。</p>

<h3>まとめ</h3>

<p>instance_evalを使ってオブジェクトの構造(インスタンス変数の値の変更、インスタンス変数の追加削除など)を実行時に変更するのが使い道、というのが個人的な感想です。</p>

<p>最後に注記：この記事はRails3.1.0のソースコードを使ってます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: 既存クラスにメソッドを追加、class_evalとsingleton method]]></title>
    <link href="http://kinopyo.com/blog/ruby-add-method-to-string-class"/>
    <updated>2011-09-09T00:00:00+09:00</updated>
    <id>http://kinopyo.com/blog/ruby-add-method-to-string-class</id>
    <content type="html"><![CDATA[<p>Rubyのクラスにメソッドを追加する方法です。ここではStringを例にしました。</p>

<p><div><script src='https://gist.github.com/1205255.js?file=solution_1.rb'></script>
<noscript><pre><code>class String
  def sex_code
    if [&quot;male&quot;, &quot;男&quot;].include? self
      0
    elsif self == &quot;女&quot;
      1
    else
      self
    end
  end  
end

p String.instance_methods.grep(/^sex/) # =&gt; [:sex_code]

p &quot;male&quot;.sex_code  # =&gt; 0
p &quot;女&quot;.sex_code  # =&gt; 1
p &quot;other&quot;.sex_code # =&gt; &quot;other&quot;</code></pre></noscript></div>

solution_1.rbはOpen Classというテクニックです。classキーワードで既存クラスを定義するときは上書きするのではなく、拡張した感じで、他のStringメソッドに影響がないです。</p>

<p><div><script src='https://gist.github.com/1205255.js?file=solution_2.rb'></script>
<noscript><pre><code>String.class_eval do
  def sex_code
    if [&quot;male&quot;, &quot;男&quot;].include? self
      0
    elsif self == &quot;女&quot;
      1
    else
      self
    end
  end  
end

p String.instance_methods.grep(/^sex/) # =&gt; [:sex_code]</code></pre></noscript></div>

solution_2.rbはただ<strong>class_eval</strong>の理論を試したかっただけです。<strong>class_eval</strong>はスコープ内の<strong>self</strong>と<strong>current class</strong>をreceiverのStringクラスに変更するんです。だからclass_evalのブロック内に定義したメソッドはStringのinstance methodになります。</p>

<p><div><script src='https://gist.github.com/1205255.js?file=solution_mistake.rb'></script>
<noscript><pre><code>def String.hello
  &quot;hello from String class methods&quot;
end

p String.singleton_methods.grep(/hello/)
p String.hello  # =&gt; &quot;hello from String class methods&quot;</code></pre></noscript></div>

solution_mistake.rbはStringのクラスメソッド(Singleton methods)を定義したもので、instance methodではないです。</p>

<p>最近「Metaprogramming Ruby」という本を読んでます。よくわからなかったこととか、曖昧だっだことがすっきりした感じです。お勧めです！</p>
]]></content>
  </entry>
  
</feed>
