<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Snippet | Yet Another Kinopyo Blog]]></title>
  <link href="http://kinopyo.github.com/blog/categories/snippet/atom.xml" rel="self"/>
  <link href="http://kinopyo.github.com/"/>
  <updated>2012-08-29T01:53:12+09:00</updated>
  <id>http://kinopyo.github.com/</id>
  <author>
    <name><![CDATA[Qihuan Piao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP プロセス数を指定して実行するマルチスレッド処理(curl_multi)]]></title>
    <link href="http://kinopyo.github.com/blog/php-multi-thread-with-specific-process-number-using-curl-multi"/>
    <updated>2011-08-09T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/php-multi-thread-with-specific-process-number-using-curl-multi</id>
    <content type="html"><![CDATA[<p>curl_multi系を使って、プロセス数を指定して実行するマルチスレッド処理です。</p>

<p>urlは配列で受け取って、もし指定したプロセス数より多い場合は分割して実行するようになってます。</p>

<p>このサンプルコードではこのブログの幾つかのurlに対してtitleを取得しました。</p>

<p><div><script src='https://gist.github.com/1073555.js?file=multi-process-exec.php'></script>
<noscript><pre><code>&lt;?php
/**
* 指定したプロセス数で並列処理を実行する
*
* @param array $url_list URLの配列
* @param boolean $url_as_key 結果配列を返すときに、urlをキーにする
* @param int $timeout タイムアウト秒数 0だと無制限
* @return array 結果配列
*/
function execute($url_list, $url_as_key = false, $timeout=0) {
    // set your process number
    $process = 5;

    $is_over_process = false;
    if ($process &lt; count($url_list)) {
        // chunk url list / process number*
        $url_chunk = array_chunk($url_list, $process);
        $is_over_process = true;
    }

    $ret = array(); 
        
    if ($is_over_process &amp;&amp; !empty($url_chunk)) {

        foreach ($url_chunk as $key =&gt; $url_list) {
            echo &quot;chunk start:{$key}\n&quot;;
            
            $res = fetch_multi_url($url_list, $url_as_key, $timeout);
            if (!empty($res)) {
                $ret = array_merge($ret, $res);
            } else {
                continue;
            }

        }
    } else if (!$is_over_process &amp;&amp; !empty($url_list)){
        $ret = fetch_multi_url($url_list, $url_as_key, $timeout);
    } else {
        echo &quot;url invalid::&quot;;
    }
    
    return $ret;
    
}

/**
 * curl_multi_execの並列処理
 * ほぼboilerplate
 *
* @param array $url_list URLの配列
* @param boolean $url_as_key 結果配列を返すときに、urlをキーにする
* @param int $timeout タイムアウト秒数 0だと無制限
* @return array 結果配列
 */
function fetch_multi_url($url_list, $url_as_key, $timeout) {
    $mh = curl_multi_init();
    foreach ($url_list as $i =&gt; $url) {
        $ch[$i] = curl_init($url);
        curl_setopt($ch[$i],CURLOPT_RETURNTRANSFER,1);

        //タイムアウト
        if ($timeout){
            curl_setopt($ch[$i],CURLOPT_TIMEOUT,$timeout);
        }

        curl_multi_add_handle($mh,$ch[$i]);
    }

    //URLを取得
    //すべて取得するまでループ
    $active = null;
    do {
        $mrc = curl_multi_exec($mh,$active);
    } while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active and $mrc == CURLM_OK) {
        if (curl_multi_select($mh) != -1) {
            do {
                $mrc = curl_multi_exec($mh,$active);
            } while ($mrc == CURLM_CALL_MULTI_PERFORM);
        }
    }

    if ($mrc != CURLM_OK) {
        echo '読み込みエラーが発生しました:'.$mrc;
    }

    //ソースコードを取得
    $res = array();
    foreach ($url_list as $i =&gt; $url) {
        if (($err = curl_error($ch[$i])) == '') {
            // url_as_keyがtrueの場合、urlをキーとして格納
            if ($url_as_key) {
                $res[$url] = curl_multi_getcontent($ch[$i]);
            // そうでない場合は、ただ配列に入れる
            } else {
                $res[$i] = curl_multi_getcontent($ch[$i]);
            }
        } else {
            echo '取得に失敗しました:'.$url_list[$i].'&lt;br /&gt;';
        }
        curl_multi_remove_handle($mh,$ch[$i]);
        curl_close($ch[$i]);
    }
    curl_multi_close($mh);

    return $res;
}


// 並列実行したいurl list
$url_list = array(
    &quot;http://www.kinopyo.com/blog/ipad-2-not-charging-when-connected-to-pc-usb&quot;,
    &quot;http://www.kinopyo.com/blog/the-first-app-i-installed-to-ipad2&quot;,
    &quot;http://www.kinopyo.com/blog/chrome-warn-before-quitting-with-command-q-in-mac&quot;,
    &quot;http://www.kinopyo.com/blog/reply-to-all-always-in-gmail&quot;,
    &quot;http://www.kinopyo.com/blog/lion-fullscreen-shortcut-key-conflict-with-evernote-client&quot;,
    &quot;http://www.kinopyo.com/blog/how-to-set-gesture-for-chrome-to-swipe-back-and-forth-in-lion&quot;,
    &quot;http://www.kinopyo.com/blog/3-free-ebooks-for-study-coffeescript&quot;
);

// start time
$start_time = microtime(true);

// execute
$res = execute($url_list, true);

// execute time
$time = microtime(true) - $start_time;

// play with the result
// here I just get the page title
$titles = array();
foreach ($res as $url =&gt; $html) {
    preg_match('{&lt;title&gt;(.*)&lt;/title&gt;}',$html, $match_title);
    $titles[$url] = $match_title[1];
}

echo &quot;Result:\n&quot;;
echo &quot;time:{$time} sec\n&quot;;
print_r($titles);</code></pre></noscript></div>
</p>

<p>参考：<a href="http://techblog.ecstudio.jp/tech-tips/php-multi.html">PHPでマルチスレッド(バックグラウンド処理)を実現する方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[githubの/usrが削除されたスレットが面白かった、Nokogiriで画像を拾うSinatra appを書いた]]></title>
    <link href="http://kinopyo.github.com/blog/a-sintra-app-to-grab-funny-images-from-a-github-thread"/>
    <updated>2011-06-21T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/a-sintra-app-to-grab-funny-images-from-a-github-thread</id>
    <content type="html"><![CDATA[<h2>スレット経緯</h2>

<p>bumblebeeというgithubのプロジェクトにinstall.shというファイルがありますが、
実行するとrm -rf /usrのコマンドで/usrが全部削除されることで大騒ぎになったようです。
<a href="https://github.com/MrMEEE/bumblebee/commit/a047be85247755cdbe0acce6f1dafc8beb84f2ac">githubのスレット</a></p>

<p><img src="http://www.kinopyo.com/wp-content/uploads/2011/06/bumblebee-rm-rf-usr.png" title="bumblebee rm -rf :usr" ></p>

<p>一個スペースが多かったですね。。</p>

<p>でコメントに上がっている画像がとても面白かったので、それをNokogiriを使って拾うrubyコードを書きました。プログラマのヒューモア満載の画像ですね。</p>

<p>Sinatra + Nokogiri + Herokuで作りました、キャッシュは<a href="https://github.com/mperham/dalli">dalli</a>というgemを使いました。</p>

<h2>成果</h2>

<p>下記iframeで表示しています。urlは<a href="http://kinopyo-omgmyusr.heroku.com">http://kinopyo-omgmyusr.heroku.com</a></p>

<iframe src="http://kinopyo-omgmyusr.heroku.com/" scrolling="yes" width="480" height="720" >
</iframe>


<h2>ソースコード</h2>

<p>githubに上げています。
<a href="https://github.com/kinopyo/Funny-Images-in-bumblebee-rm--rf--usr-thread">https://github.com/kinopyo/Funny-Images-in-bumblebee-rm--rf--usr-thread</a></p>

<p>参考になったリンク：
<a href="http://devcenter.heroku.com/articles/memcache">http://devcenter.heroku.com/articles/memcache</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPで他のJSON形式APIをコールするサンプルコード]]></title>
    <link href="http://kinopyo.github.com/blog/php-call-json-api-sample-code"/>
    <updated>2011-03-07T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/php-call-json-api-sample-code</id>
    <content type="html"><![CDATA[<p>file_get_contentsとjson_decodeの組み合わせでAPIコールするサンプルコードです。</p>

<p>```php
// APIコール
$api_url = 'http://example.com/api/';
$api_ret = file_get_contents($api_url);</p>

<p>// JSONにデコード
$api_result = json_decode($api_ret,true);</p>

<p>// APIエラーチェック: 何かしらの成功フラグでチェック
if(isset($api_result<em>'success']) &amp;&amp; $api_result['success'</em> == 0)
{</p>

<pre><code>// 処理
</code></pre>

<p>}
else
{</p>

<pre><code>// handle error
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring DataSource beanのメモ]]></title>
    <link href="http://kinopyo.github.com/blog/how-to-define-spring-datasource-bean"/>
    <updated>2010-12-06T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/how-to-define-spring-datasource-bean</id>
    <content type="html"><![CDATA[<p>DataSource Beanを定義する際applicationContext.xmlの書き方と、Javaで呼び出すコードのメモです。ずいぶん昔のメモです。。</p>

<p>こんなjdbc.propertiesファイルがクラスパスにあるとします。</p>

<p>```
jdbc.driverClassName=org.h2.Driver
jdbc.url=jdbc:h2:~/test
jdbc.username=sa
jdbc.password=</p>

<p>```</p>

<p>そしてSpringのapplicationContext.xmlにはこう書きます。</p>

<p>```xml
&lt;context:property-placeholder location="jdbc.properties"/></p>

<p>&lt;bean id="dataSource"</p>

<pre><code>class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
&lt;property name="driverClassName" value="${jdbc.driverClassName}" /&gt;
&lt;property name="url" value="${jdbc.url}" /&gt;
&lt;property name="username" value="${jdbc.username}" /&gt;
&lt;property name="password" value="${jdbc.password}" /&gt;
</code></pre>

<p></bean></p>

<p><bean id="accountDao" class="test.dao.AccountDao"></p>

<pre><code>&lt;property name="dataSource" ref="dataSource" /&gt;
</code></pre>

<p></bean></p>

<p>```</p>

<p>Javaでの呼び出し：</p>

<p>```java
ApplicationContext context = new ClassPathXmlApplicationContext(</p>

<pre><code>    "applicationContext.xml");
</code></pre>

<p>AccountDao accountDao = (AccountDao) context.getBean("accountDao");</p>

<p>// other code...</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript: カンマ区切りで数値をフォーマットする]]></title>
    <link href="http://kinopyo.github.com/blog/javascript-format-number-to-japanese-currency"/>
    <updated>2010-11-29T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/javascript-format-number-to-japanese-currency</id>
    <content type="html"><![CDATA[<p>```javascript</p>

<p>/##
 #  数値を日本円表現にフォーマット。
 #  例：12345 -> 12,345
 #
 # /
num2Currency = function(obj){</p>

<pre><code>// 画面項目の値
var str=obj.value;
var num = new String(str).replace(/,/g/"");
while(num != (num =num.replace(/^(-?\d+)(\d{3})/,"$1,$2")));
obj.value = num;
</code></pre>

<p>}</p>

<p>/##
 #  日本円表現を数値にフォーマット。
 #  例：123,45 -> 12345
 #
 # /
currency2Num = function(obj){</p>

<pre><code>var str=obj.value;
var num = str.replace(/,/g,"");
obj.value = num;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
