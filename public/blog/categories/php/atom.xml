<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Yet Another Kinopyo Blog]]></title>
  <link href="http://kinopyo.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://kinopyo.github.com/"/>
  <updated>2012-08-31T20:53:14+09:00</updated>
  <id>http://kinopyo.github.com/</id>
  <author>
    <name><![CDATA[Qihuan Piao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[さくらVPSのパフォーマンスチューニング]]></title>
    <link href="http://kinopyo.github.com/blog/sakura-vps-centos-performance-tunning-wordpress"/>
    <updated>2011-11-11T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/sakura-vps-centos-performance-tunning-wordpress</id>
    <content type="html"><![CDATA[<p>さくらVPSでWordpressブログをやってます。そんなにアクセスがないはずなのに、さくらVPSに移行した当時は結構サーバが落ちました。topコマンドで見るとスワップが結構70%まで上がったりして、手動でapache再起動とかもやりました。。ネットでいろいろググッてそれなりにパフォーマンスチューニングした結果やっと安定して、同じサーバに2つのWordpressブログと一つのRailsアプリケーションを実行しています。</p>

<p>参考までにさくらVPSは一番安いの512MB、月1000円のプランで、平日だとこのブログの一日PVは大体500〜600です。</p>

<p>チューニングしてから結構時間が経ったのでだいぶ忘れました。Evernoteでのメモを貼ります。</p>

<p>効果が高い順で。</p>

<h2>Wordpress</h2>

<p><strong>W3 Total Cache</strong>プラグインが一押しです。インストールも設定も簡単ですし、一番効果があります。
ページのキャッシュ、cssやjavascriptのマージと圧縮など、結構やってくれます。実際これだけ入れても感じるほど早くなるはずです。</p>

<h2>Apache</h2>

<p><code>httpd.conf</code>を編集します。いろいろ修正してみましたが、結果下記の設定にしました。この辺はググったら結構出ますが、それぞれの環境に合わせて試行錯誤したほうがオススメです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;IfModule prefork.c>
</span><span class='line'>StartServers       5
</span><span class='line'>MinSpareServers    5
</span><span class='line'>MaxSpareServers   10
</span><span class='line'>ServerLimit      64
</span><span class='line'>MaxClients       64
</span><span class='line'>MaxRequestsPerChild  50
</span><span class='line'>MaxMemFree 2000
</span><span class='line'>&lt;/IfModule>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>PHP</h2>

<h3>/etc/php.ini</h3>

<p>zlib.output_compression = On</p>

<h3>APC</h3>

<p>pecl install APC</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらVPSに移行後wordpressで画像アップロードした時にサムネイルが生成されない件]]></title>
    <link href="http://kinopyo.github.com/blog/wordpress-not-create-thumbnail-image-in-uploading-after-migrate-to-sakura-vps"/>
    <updated>2011-09-21T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/wordpress-not-create-thumbnail-image-in-uploading-after-migrate-to-sakura-vps</id>
    <content type="html"><![CDATA[<p>Wordpressで画像アップロード時にいつも3サイズのサムネイルが生成されたのですが、さくらVPSに移行後それができなくなったのです。</p>

<p><img src="http://hsuzuki.ddo.jp/wewp-content/uploads/2008/12/radio_f.bmp" /></p>

<p>調べてみたらPHPの画像処理のライブラリであるgdがインストールしてないことがわかりました。
CentOSなのでyumを使ってインストールすれば解決です。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install php-gd
</span><span class='line'>sudo service httpd restart</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP プロセス数を指定して実行するマルチスレッド処理(curl_multi)]]></title>
    <link href="http://kinopyo.github.com/blog/php-multi-thread-with-specific-process-number-using-curl-multi"/>
    <updated>2011-08-09T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/php-multi-thread-with-specific-process-number-using-curl-multi</id>
    <content type="html"><![CDATA[<p>curl_multi系を使って、プロセス数を指定して実行するマルチスレッド処理です。</p>

<p>urlは配列で受け取って、もし指定したプロセス数より多い場合は分割して実行するようになってます。</p>

<p>このサンプルコードではこのブログの幾つかのurlに対してtitleを取得しました。</p>

<p><div><script src='https://gist.github.com/1073555.js?file=multi-process-exec.php'></script>
<noscript><pre><code>&lt;?php
/**
* 指定したプロセス数で並列処理を実行する
*
* @param array $url_list URLの配列
* @param boolean $url_as_key 結果配列を返すときに、urlをキーにする
* @param int $timeout タイムアウト秒数 0だと無制限
* @return array 結果配列
*/
function execute($url_list, $url_as_key = false, $timeout=0) {
    // set your process number
    $process = 5;

    $is_over_process = false;
    if ($process &lt; count($url_list)) {
        // chunk url list / process number*
        $url_chunk = array_chunk($url_list, $process);
        $is_over_process = true;
    }

    $ret = array(); 
        
    if ($is_over_process &amp;&amp; !empty($url_chunk)) {

        foreach ($url_chunk as $key =&gt; $url_list) {
            echo &quot;chunk start:{$key}\n&quot;;
            
            $res = fetch_multi_url($url_list, $url_as_key, $timeout);
            if (!empty($res)) {
                $ret = array_merge($ret, $res);
            } else {
                continue;
            }

        }
    } else if (!$is_over_process &amp;&amp; !empty($url_list)){
        $ret = fetch_multi_url($url_list, $url_as_key, $timeout);
    } else {
        echo &quot;url invalid::&quot;;
    }
    
    return $ret;
    
}

/**
 * curl_multi_execの並列処理
 * ほぼboilerplate
 *
* @param array $url_list URLの配列
* @param boolean $url_as_key 結果配列を返すときに、urlをキーにする
* @param int $timeout タイムアウト秒数 0だと無制限
* @return array 結果配列
 */
function fetch_multi_url($url_list, $url_as_key, $timeout) {
    $mh = curl_multi_init();
    foreach ($url_list as $i =&gt; $url) {
        $ch[$i] = curl_init($url);
        curl_setopt($ch[$i],CURLOPT_RETURNTRANSFER,1);

        //タイムアウト
        if ($timeout){
            curl_setopt($ch[$i],CURLOPT_TIMEOUT,$timeout);
        }

        curl_multi_add_handle($mh,$ch[$i]);
    }

    //URLを取得
    //すべて取得するまでループ
    $active = null;
    do {
        $mrc = curl_multi_exec($mh,$active);
    } while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active and $mrc == CURLM_OK) {
        if (curl_multi_select($mh) != -1) {
            do {
                $mrc = curl_multi_exec($mh,$active);
            } while ($mrc == CURLM_CALL_MULTI_PERFORM);
        }
    }

    if ($mrc != CURLM_OK) {
        echo '読み込みエラーが発生しました:'.$mrc;
    }

    //ソースコードを取得
    $res = array();
    foreach ($url_list as $i =&gt; $url) {
        if (($err = curl_error($ch[$i])) == '') {
            // url_as_keyがtrueの場合、urlをキーとして格納
            if ($url_as_key) {
                $res[$url] = curl_multi_getcontent($ch[$i]);
            // そうでない場合は、ただ配列に入れる
            } else {
                $res[$i] = curl_multi_getcontent($ch[$i]);
            }
        } else {
            echo '取得に失敗しました:'.$url_list[$i].'&lt;br /&gt;';
        }
        curl_multi_remove_handle($mh,$ch[$i]);
        curl_close($ch[$i]);
    }
    curl_multi_close($mh);

    return $res;
}


// 並列実行したいurl list
$url_list = array(
    &quot;http://www.kinopyo.com/blog/ipad-2-not-charging-when-connected-to-pc-usb&quot;,
    &quot;http://www.kinopyo.com/blog/the-first-app-i-installed-to-ipad2&quot;,
    &quot;http://www.kinopyo.com/blog/chrome-warn-before-quitting-with-command-q-in-mac&quot;,
    &quot;http://www.kinopyo.com/blog/reply-to-all-always-in-gmail&quot;,
    &quot;http://www.kinopyo.com/blog/lion-fullscreen-shortcut-key-conflict-with-evernote-client&quot;,
    &quot;http://www.kinopyo.com/blog/how-to-set-gesture-for-chrome-to-swipe-back-and-forth-in-lion&quot;,
    &quot;http://www.kinopyo.com/blog/3-free-ebooks-for-study-coffeescript&quot;
);

// start time
$start_time = microtime(true);

// execute
$res = execute($url_list, true);

// execute time
$time = microtime(true) - $start_time;

// play with the result
// here I just get the page title
$titles = array();
foreach ($res as $url =&gt; $html) {
    preg_match('{&lt;title&gt;(.*)&lt;/title&gt;}',$html, $match_title);
    $titles[$url] = $match_title[1];
}

echo &quot;Result:\n&quot;;
echo &quot;time:{$time} sec\n&quot;;
print_r($titles);</code></pre></noscript></div>
</p>

<p>参考：<a href="http://techblog.ecstudio.jp/tech-tips/php-multi.html">PHPでマルチスレッド(バックグラウンド処理)を実現する方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP:必要桁数まで0埋めする]]></title>
    <link href="http://kinopyo.github.com/blog/php-pad-a-number-to-certain-length-with-0"/>
    <updated>2011-07-22T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/php-pad-a-number-to-certain-length-with-0</id>
    <content type="html"><![CDATA[<p>```php
// 47 -> 047
sprintf("%03d", 47);</p>

<p>// or</p>

<p>// parameter: string $input , int $pad_length,
str_pad(47, 3, '0', STR_PAD_LEFT);</p>

<p>```</p>

<p>str-padについては：<a href="http://php.net/manual/en/function.str-pad.php">http://php.net/manual/en/function.str-pad.php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[複数URLのFacebookいいね(Like)された数を取得する方法]]></title>
    <link href="http://kinopyo.github.com/blog/how-to-get-facebook-like-counts-for-multiple-urls"/>
    <updated>2011-07-20T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/how-to-get-facebook-like-counts-for-multiple-urls</id>
    <content type="html"><![CDATA[<p>今はほとんどのサイトがLike(いいね！)ボタンを置いてますが、Likeボタンがどれだけクリックされたか、その数は気になりますね。</p>

<p>Facebook独自のFQL（文法はSQLに似ている）を使って複数URLのLikeされた数が取れます。Facebook公式ドキュメントは<a href="http://developers.facebook.com/docs/reference/fql/link_stat/">こちら</a>にあります。</p>

<p>下記はPHPでのサンプルコードです。
<div><script src='https://gist.github.com/1073555.js?file=get_facebook_like_counts_of_multiple_urls.php'></script>
<noscript><pre><code>&lt;?php
// see fql docs:
// http://developers.facebook.com/docs/reference/fql/link_stat/

$url_list = array(
	'http://example.com/url1.html',
	'http://example.com/url2.html',
);

$url_string = '(&quot;'. implode('&quot;,&quot;', $url_list). '&quot;)';

// just like sql syntax
$fql = &quot;select url, like_count from link_stat where url in&quot;.$url_string;
// remember to encode it
$url = &quot;https://api.facebook.com/method/fql.query?format=json&amp;query=&quot;.urlencode($fql);

$ch = curl_init($url);
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$data = curl_exec($ch);
curl_close($ch);

$json = json_decode($data, true);
$ret = array();
print_r($json);

// result example
/*
Array
(
    [0] =&gt; Array
        (
            [url] =&gt; http://example.com/url1.html
            [like_count] =&gt; 10
        )

    [1] =&gt; Array
        (
            [url] =&gt; http://example.com/url2.html
            [like_count] =&gt; 20
        )

)
*/</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
