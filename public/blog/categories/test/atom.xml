<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | Yet Another Kinopyo Blog]]></title>
  <link href="http://kinopyo.com/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://kinopyo.com/"/>
  <updated>2012-09-08T15:34:18+09:00</updated>
  <id>http://kinopyo.com/</id>
  <author>
    <name><![CDATA[Qihuan Piao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Machinist 1.0: How to generate an object without saving it to the database]]></title>
    <link href="http://kinopyo.com/blog/machinist-how-to-generate-an-object-without-saving-it-to-the-database/"/>
    <updated>2012-07-20T20:12:00+09:00</updated>
    <id>http://kinopyo.com/blog/machinist-how-to-generate-an-object-without-saving-it-to-the-database</id>
    <content type="html"><![CDATA[<p><strong>CAUTION</strong> It's specific machinist 1.0-maintenance.</p>

<p>Machinist is an alternative for Fixtures or FactoryGirl.</p>

<h2>make_unsaved</h2>

<blockquote><p>If you want to generate an object without saving it to the database, replace <code>make</code> with <code>make_unsaved</code></p></blockquote>

<p><a href="https://github.com/notahat/machinist/tree/1.0-maintenance#blueprints---generating-objects">reference</a></p>

<p>So remember to use <code>make_unsaved</code>.</p>

<h3>More</h3>

<p>If you're interested, here is the source code.</p>

<ul>
<li><a href="https://github.com/notahat/machinist/blob/1.0-maintenance/lib/machinist/active_record.rb#L61">https://github.com/notahat/machinist/blob/1.0-maintenance/lib/machinist/active_record.rb#L61</a></li>
<li><a href="https://github.com/notahat/machinist/blob/1.0-maintenance/lib/machinist.rb#L107">https://github.com/notahat/machinist/blob/1.0-maintenance/lib/machinist.rb#L107</a></li>
</ul>


<h2>Under latest version</h2>

<p>Well if you're using latest machinist, which is 2.0 at this point, it's much simpler and cleaner.</p>

<p><code>make</code> for generating but not saving an object, <code>make!</code> for saving it to database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FactoryGirl: How to define a value based on an already defined one]]></title>
    <link href="http://kinopyo.com/blog/factorygirl-how-to-define-a-value-based-on-an-already-defined-one"/>
    <updated>2012-01-26T00:00:00+09:00</updated>
    <id>http://kinopyo.com/blog/factorygirl-%e6%97%a2%e3%81%ab%e5%ae%9a%e7%be%a9%e3%81%97%e3%81%9f%e5%80%a4%e3%82%92%e3%83%99%e3%83%bc%e3%82%b9%e3%81%ab%e3%81%97%e3%81%9f%e5%80%a4%e3%82%92%e8%a8%ad%e5%ae%9a%e3%81%99%e3%82%8b</id>
    <content type="html"><![CDATA[<p>FactoryGirlで既に定義した値を使おうとする時の方法です。
例えばLessonというクラスのstart_atとend_atの属性があり、start_atを定義した後はend_atをその2時間後に定義したい場合、ブロックでパラメータを渡せばそこでstart_atにアクセスできるようになります。</p>

<p><div><script src='https://gist.github.com/1680766.js?file='></script>
<noscript><pre><code># Say you have two columns: start_at, end_at
# When start_at is defined, you want end_at's value based on the start_at
# Here is the solution, passing a block to get the object of the context.

start_at Random.new.rand(14..45).days.from_now
end_at { |l| l.start_at + 2.hours }

# Full example
FactoryGirl.define do
  factory :lesson do
    sequence(:title) { |n| &quot;lesson title#{n}&quot; }
    sequence(:description) { |n| &quot;lesson description#{n}&quot; }
    capacity 6
    start_at Random.new.rand(14..45).days.from_now
    end_at { |l| l.start_at + 2.hours }
    price [5000, 5100, 5200, 5300, 5500, 6000].sample
  end
end</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
