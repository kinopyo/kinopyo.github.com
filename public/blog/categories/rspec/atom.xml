<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | Yet Another Kinopyo Blog]]></title>
  <link href="http://kinopyo.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://kinopyo.com/"/>
  <updated>2012-09-29T01:26:08+09:00</updated>
  <id>http://kinopyo.com/</id>
  <author>
    <name><![CDATA[Qihuan Piao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Machinist 1.0: How to generate an object without saving it to the database]]></title>
    <link href="http://kinopyo.com/blog/machinist-how-to-generate-an-object-without-saving-it-to-the-database/"/>
    <updated>2012-07-20T20:12:00+09:00</updated>
    <id>http://kinopyo.com/blog/machinist-how-to-generate-an-object-without-saving-it-to-the-database</id>
    <content type="html"><![CDATA[<p><strong>CAUTION</strong> It's specific machinist 1.0-maintenance.</p>

<p>Machinist is an alternative for Fixtures or FactoryGirl.</p>

<h2>make_unsaved</h2>

<blockquote><p>If you want to generate an object without saving it to the database, replace <code>make</code> with <code>make_unsaved</code></p></blockquote>

<p><a href="https://github.com/notahat/machinist/tree/1.0-maintenance#blueprints---generating-objects">reference</a></p>

<p>So remember to use <code>make_unsaved</code>.</p>

<h3>More</h3>

<p>If you're interested, here is the source code.</p>

<ul>
<li><a href="https://github.com/notahat/machinist/blob/1.0-maintenance/lib/machinist/active_record.rb#L61">https://github.com/notahat/machinist/blob/1.0-maintenance/lib/machinist/active_record.rb#L61</a></li>
<li><a href="https://github.com/notahat/machinist/blob/1.0-maintenance/lib/machinist.rb#L107">https://github.com/notahat/machinist/blob/1.0-maintenance/lib/machinist.rb#L107</a></li>
</ul>


<h2>Under latest version</h2>

<p>Well if you're using latest machinist, which is 2.0 at this point, it's much simpler and cleaner.</p>

<p><code>make</code> for generating but not saving an object, <code>make!</code> for saving it to database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails RSpec: Postgresqlでrake specするとNOTICEの警告がいっぱい出た]]></title>
    <link href="http://kinopyo.com/blog/rails-rspec-postgresql-turn-offrake-spec-warnings-notice"/>
    <updated>2012-03-29T00:00:00+09:00</updated>
    <id>http://kinopyo.com/blog/rails-rspec-postgresql-turn-offrake-spec-warnings-notice</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/arcright/20110623/1308796154">PostgresSQLでrake specするとNOTICEがいっぱいでる</a>が大変参考になった。</p>

<p><blockquote><p>NOTICE:  CREATE TABLE will create implicit sequence "peroperos_id_seq" for serial column "peroperos.id"<br/>NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "peroperos_pkey" for table "peroperos"<br/>～略～</p></blockquote>
の警告をシャットダウンする方法です。</p>

<p><div><script src='https://gist.github.com/2232851.js?file='></script>
<noscript><pre><code># add min_messages to test env

test:
  adapter: postgresql
  encoding: unicode
  database: homu_test
  pool: 5
  username: postgres
  password:
  min_messages: warning</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec Capybara_webkitを使ってjavascriptをテストする]]></title>
    <link href="http://kinopyo.com/blog/test-javascript-spec-in-rspec-with-capybara-webkit"/>
    <updated>2011-11-06T00:00:00+09:00</updated>
    <id>http://kinopyo.com/blog/test-javascript-spec-in-rspec-with-capybara-webkit</id>
    <content type="html"><![CDATA[<h2>Goal</h2>

<p>ゴールと言うか目標はrspecのrequest(integration) testでjavascriptのテストをしたいです。が、いろいろハマってその問題と解決策を時間軸でメモしておきます。</p>

<p><em>Capybara</em>についてはある程度知ってる前提です。</p>

<h2>javascriptのテストを書く</h2>

<p><em>:js => true</em>でrspecのintegration testでjavascriptを有効に設定できます。
例：
<div><script src='https://gist.github.com/1342538.js?file=example_spec_with_javascript_enalbed.rb'></script>
<noscript><pre><code># in your view erb file
&lt;%= link_to_function &quot;test js&quot;, '$(this).html(&quot;js works&quot;)' %&gt;

# in test spec
it &quot;supports js&quot;, :js =&gt; true do
  visit tasks_path
  click_link &quot;test js&quot;
  page.should have_content(&quot;js works&quot;)
end</code></pre></noscript></div>
</p>

<p>ただデフォルトではjavascriptをサポートしないので、このspecは失敗します。解決の鍵は<em>capybara driver</em>というものです。</p>

<h2>capybara_webkit driver</h2>

<h3>なぜcapybara_webkit driver使う</h3>

<p><blockquote><p>Capybara ... currently comes with Rack::Test and Selenium support built in.</p></p><p><p>By default, Capybara uses the :rack_test driver, which is fast but does not support JavaScript. You can set up a different default driver for your features.</p></p><p><p>The capybara-webkit driver is for true headless testing. It uses QtWebKit to start a rendering engine process. It can execute JavaScript as well. It is significantly faster than drivers like Selenium since it does not load an entire browser.</p><footer><strong>github</strong> <cite><a href='https://github.com/jnicklas/capybara'>github.com/jnicklas/capybara/&hellip;</a></cite></footer></blockquote>
のようにcapybaraは <em>Rack::Test</em>と<em>Selenium</em>のdriverがbuilt-inされて、デフォルトdriverは前者の:rack_testでjavascriptをサポートしないです。<em>Selenium</em>はサポートしますが、それよりも速いのが<em>capybara-webkit</em>なのでそれを採用しました。</p>

<h2>capybara_webkit driverをインストール</h2>

<p>Gemfileにcapybara_webkitを追記、bundle installします。webkitはQTが必要なので、もしそれがないとbundle installで失敗(エラー)します。後はspec_helper.rbにdefault driverをwebkitに設定します。
<div><script src='https://gist.github.com/1342538.js?file=install_capybara_webkit.rb'></script>
<noscript><pre><code># webkit-dependency
# if you don't have homebrew installed
/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.github.com/gist/323731)&quot;
# if you don't have QT installed
brew install qt

# Gemfile, add capybara-webkit
group :test, :development do
  ...
  gem &quot;capybara-webkit&quot;
end

# in Terminal
bundle install

# set default capybara driver to webkit.
# I put this into spec_helper.rb
Capybara.javascript_driver = :webkit

# In RSpec, use the :js =&gt; true flag
it &quot;supports js&quot;, :js =&gt; true do
  ...
end</code></pre></noscript></div>
</p>

<p>これで最初のサンプルspecは通るはずです。</p>

<h2>データベースと絡んだテスト</h2>

<p>上記のままだとデータベースと絡んだテストはまた失敗します。
例：
<div><script src='https://gist.github.com/1342538.js?file=js_test_combined_with_database.rb'></script>
<noscript><pre><code>it &quot;displays tasks&quot;, :js =&gt; true do
  Task.create!(:name =&gt; &quot;foo&quot;)
  visit tasks_path
  click_link 'some link'
  page.should have_content(&quot;some text&quot;)
end</code></pre></noscript></div>
</p>

<p>自分で確認してみたら、テスト時に作成したデータはjavascriptのテストで使えないっぽいです。Railscastsの記事によりますと<strong>rspecのテストではデータベーストランザクションを使うが、それがselenium或いはwebkitでは使えない</strong>そうです。そのために<em>database_cleaner</em>というgemを使います。</p>

<h2>database_cleanerを使う</h2>

<p><div><script src='https://gist.github.com/1342538.js?file=use_database_cleaner_gem.rb'></script>
<noscript><pre><code># in Gemfiile
group :test, :development do
  ...
  gem &quot;database_cleaner&quot;
end

# in Terminal
bundle install

# in spec_helper.rb
RSpec.configure do |config|
  # ...
  config.use_transactional_fixtures = false
  
  config.before(:suite) do
    DatabaseCleaner.strategy = :truncation
  end

  config.before(:each) do
    DatabaseCleaner.start
  end

  config.after(:each) do
    DatabaseCleaner.clean
  end
end</code></pre></noscript></div>
</p>

<p><em>config.use_transactional_fixtures</em>をfalseにした時点でもうテスト自体は通るはずですが、データはずっとそのまま残ってしまうんです。database_cleanerは名の通りデータベースをテスト前後で綺麗な状態に保つことができます。</p>

<p>これでもう環境面の設定は完了です！</p>

<h2>Resources</h2>

<ul>
<li><a href="https://github.com/jnicklas/capybara">capybara</a></li>
<li><a href="https://github.com/mxcl/homebrew/wiki/installation">install_homebrew</a></li>
<li><a href="https://github.com/thoughtbot/capybara-webkit/wiki/Installing-QT">install_QT</a></li>
<li><a href="https://github.com/thoughtbot/capybara-webkit">capybara_webkit_driver</a></li>
<li><a href="https://github.com/bmabey/database_cleaner">database_cleaner_gem</a></li>
<li><a href="http://railscasts.com/episodes/257-request-specs-and-capybara">#257 Request Specs and Capybara</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rspec shared context sample code]]></title>
    <link href="http://kinopyo.com/blog/rspec-shared_context-sample-code"/>
    <updated>2011-10-13T00:00:00+09:00</updated>
    <id>http://kinopyo.com/blog/rspec-shared_context-sample-code</id>
    <content type="html"><![CDATA[<p><div><script src='https://gist.github.com/1283896.js?file='></script>
<noscript><pre><code>shared_context &quot;shared stuff&quot; do
  before { @some_var = :some_value }
  def shared_method
    &quot;it works&quot;
  end
  let(:shared_let) { {'arbitrary' =&gt; 'object'} }
  subject do
    'this is the subject'
  end
end

describe &quot;group that includes a shared context using 'include_context'&quot; do
  include_context &quot;shared stuff&quot;

  it &quot;has access to methods defined in shared context&quot; do
    shared_method.should eq(&quot;it works&quot;)
  end

  it &quot;has access to methods defined with let in shared context&quot; do
    shared_let['arbitrary'].should eq('object')
  end

  it &quot;runs the before hooks defined in the shared context&quot; do
    @some_var.should be(:some_value)
  end

  it &quot;accesses the subject defined in the shared context&quot; do
    subject.should eq('this is the subject')
  end
end</code></pre></noscript></div>
</p>

<h1>日本語</h1>

<p>shared_context はその名前の通りコンテキスト (テストを行なうときの状況) を共有するための機能です。
shared_context を使うことで複数箇所にちらばる同一処理をまとめることができます。shared_context は shared_context が書かれたファイルを require することでも使えるようになるので別のスペックファイルでも使うことができます。</p>

<p><div><script src='https://gist.github.com/1283896.js?file='></script>
<noscript><pre><code>shared_context &quot;shared stuff&quot; do
  before { @some_var = :some_value }
  def shared_method
    &quot;it works&quot;
  end
  let(:shared_let) { {'arbitrary' =&gt; 'object'} }
  subject do
    'this is the subject'
  end
end

describe &quot;group that includes a shared context using 'include_context'&quot; do
  include_context &quot;shared stuff&quot;

  it &quot;has access to methods defined in shared context&quot; do
    shared_method.should eq(&quot;it works&quot;)
  end

  it &quot;has access to methods defined with let in shared context&quot; do
    shared_let['arbitrary'].should eq('object')
  end

  it &quot;runs the before hooks defined in the shared context&quot; do
    @some_var.should be(:some_value)
  end

  it &quot;accesses the subject defined in the shared context&quot; do
    subject.should eq('this is the subject')
  end
end</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
