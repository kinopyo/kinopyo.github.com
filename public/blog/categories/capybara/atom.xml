<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: capybara | Yet Another Kinopyo Blog]]></title>
  <link href="http://kinopyo.github.com/blog/categories/capybara/atom.xml" rel="self"/>
  <link href="http://kinopyo.github.com/"/>
  <updated>2012-08-26T12:20:36+09:00</updated>
  <id>http://kinopyo.github.com/</id>
  <author>
    <name><![CDATA[Qihuan Piao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rspec Capybara_webkitを使ってjavascriptをテストする]]></title>
    <link href="http://kinopyo.github.com/blog/test-javascript-spec-in-rspec-with-capybara-webkit"/>
    <updated>2011-11-06T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/test-javascript-spec-in-rspec-with-capybara-webkit</id>
    <content type="html"><![CDATA[<h2>Goal</h2>

<p>ゴールと言うか目標はrspecのrequest(integration) testでjavascriptのテストをしたいです。が、いろいろハマってその問題と解決策を時間軸でメモしておきます。</p>

<p><em>Capybara</em>についてはある程度知ってる前提です。</p>

<h2>javascriptのテストを書く</h2>

<p><em>:js => true</em>でrspecのintegration testでjavascriptを有効に設定できます。
例：
<em>gist id=1342538 file=example_spec_with_javascript_enalbed.rb</em></p>

<p>ただデフォルトではjavascriptをサポートしないので、このspecは失敗します。解決の鍵は<em>capybara driver</em>というものです。</p>

<h2>capybara_webkit driver</h2>

<h3>なぜcapybara_webkit driver使う</h3>

<p>{% blockquote https://github.com/jnicklas/capybara %}
Capybara ... currently comes with Rack::Test and Selenium support built in.</p>

<p>By default, Capybara uses the :rack_test driver, which is fast but does not support JavaScript. You can set up a different default driver for your features.</p>

<p>The capybara-webkit driver is for true headless testing. It uses QtWebKit to start a rendering engine process. It can execute JavaScript as well. It is significantly faster than drivers like Selenium since it does not load an entire browser.
{% endblockquote %}
のようにcapybaraは <em>Rack::Test</em>と<em>Selenium</em>のdriverがbuilt-inされて、デフォルトdriverは前者の:rack_testでjavascriptをサポートしないです。<em>Selenium</em>はサポートしますが、それよりも速いのが<em>capybara-webkit</em>なのでそれを採用しました。</p>

<h2>capybara_webkit driverをインストール</h2>

<p>Gemfileにcapybara_webkitを追記、bundle installします。webkitはQTが必要なので、もしそれがないとbundle installで失敗(エラー)します。後はspec_helper.rbにdefault driverをwebkitに設定します。
<em>gist id=1342538 file= install_capybara_webkit.rb</em></p>

<p>これで最初のサンプルspecは通るはずです。</p>

<h2>データベースと絡んだテスト</h2>

<p>上記のままだとデータベースと絡んだテストはまた失敗します。
例：
<em>gist id=1342538 file=js_test_combined_with_database.rb</em></p>

<p>自分で確認してみたら、テスト時に作成したデータはjavascriptのテストで使えないっぽいです。Railscastsの記事によりますと<strong>rspecのテストではデータベーストランザクションを使うが、それがselenium或いはwebkitでは使えない</strong>そうです。そのために<em>database_cleaner</em>というgemを使います。</p>

<h2>database_cleanerを使う</h2>

<p><em>gist id=1342538 file=use_database_cleaner_gem.rb</em></p>

<p><em>config.use_transactional_fixtures</em>をfalseにした時点でもうテスト自体は通るはずですが、データはずっとそのまま残ってしまうんです。database_cleanerは名の通りデータベースをテスト前後で綺麗な状態に保つことができます。</p>

<p>これでもう環境面の設定は完了です！</p>

<h2>Resources</h2>

<ul>
<li><a href="https://github.com/jnicklas/capybara">capybara</a></li>
<li><a href="https://github.com/mxcl/homebrew/wiki/installation">install_homebrew</a></li>
<li><a href="https://github.com/thoughtbot/capybara-webkit/wiki/Installing-QT">install_QT</a></li>
<li><a href="https://github.com/thoughtbot/capybara-webkit">capybara_webkit_driver</a></li>
<li><a href="https://github.com/bmabey/database_cleaner">database_cleaner_gem</a></li>
<li><a href="http://railscasts.com/episodes/257-request-specs-and-capybara">#257 Request Specs and Capybara</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
