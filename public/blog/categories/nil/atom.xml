<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nil | Yet Another Kinopyo Blog]]></title>
  <link href="http://kinopyo.github.com/blog/categories/nil/atom.xml" rel="self"/>
  <link href="http://kinopyo.github.com/"/>
  <updated>2012-08-26T12:20:36+09:00</updated>
  <id>http://kinopyo.github.com/</id>
  <author>
    <name><![CDATA[Qihuan Piao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TextMate Bundler, NetBeans Plugin for HAML]]></title>
    <link href="http://kinopyo.github.com/blog/textmate-bundler-netbeans-plugin-for-haml"/>
    <updated>2010-07-30T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/textmate-bundler-netbeans-plugin-for-haml</id>
    <content type="html"><![CDATA[<h2>TextMate Bundler：</h2>

<p><a href="http://github.com/handcrafted/handcrafted-haml-textmate-bundle">http://github.com/handcrafted/handcrafted-haml-textmate-bundle</a></p>

<h2>NetBeans plugin:</h2>

<p><a href="http://wiki.netbeans.org/FaqPluginInstall">http://wiki.netbeans.org/FaqPluginInstall</a>
It's really a simple plugin just for highlight the syntax.
No auto-complete,and you cannot see the see the reference of  ruby code in haml.</p>

<h1>日本語</h1>

<h2>TextMateのBundlerはこちら：</h2>

<p><a href="http://github.com/handcrafted/handcrafted-haml-textmate-bundle">http://github.com/handcrafted/handcrafted-haml-textmate-bundle</a></p>

<h2>NetBeansのプラグインはこちらでダウンロード：</h2>

<p><a href="http://wiki.netbeans.org/FaqPluginInstall">http://wiki.netbeans.org/FaqPluginInstall</a>
ほぼハイライト以外は何の機能もないです。
HAMLでRubyコードを書いても入力補完も、リファレンスも出ませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ID + Slug name in URL in Rails]]></title>
    <link href="http://kinopyo.github.com/blog/rails-id-slug-name-in-url"/>
    <updated>2010-07-29T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/rails-id-slug-name-in-url</id>
    <content type="html"><![CDATA[<p>This is about how to customize the url to the form like "id + post.title", which can be simply overriding the<em> to_param</em> method in your model class.</p>

<p>Here is the example.</p>

<p>```ruby
  class Person</p>

<pre><code>def to_param
  "#{id}-#{name.parameterize}"
end
</code></pre>

<p>  end</p>

<p>  @person = Person.find(1)
  # => #<Person id: 1, name: "Donald E. Knuth"></p>

<p>  &lt;%= link_to(@person.name, person_path(@person)) %>
  # => <a href="http://kinopyo.github.com/person/1-donald-e-knuth">Donald E. Knuth</a></p>

<p>```
The <em>parameterize</em> is a method that replaces special characters in a string so that it may be used as part of a ‘pretty’ URL.
Rails is smart enough to extract this back into the plain id when you access your controller action.
You can access the url '/person/1-kinopyo' or '/person/1', both ok.</p>

<p>If you want to know more, here is a good article: <a href="http://augustl.heroku.com/blog/styling-rails-urls">http://augustl.heroku.com/blog/styling-rails-urls</a>.</p>

<h1>日本語</h1>

<p>slugはurlをより綺麗に表示するためのものです。例えばこの記事のpermanent urlは"rails-id-slug-name-in-url"にしています。英語世界になるんですが、これのようにurlを見ただけでそのurl先の内容が大体わかるようにするのがslugです。</p>

<p>この記事ではRailsで"id + post.title"のような形のURLを作る方法を紹介します。</p>

<h2>方法</h2>

<p>モデルクラス内に<em>to_param</em>メソッドをオーバーライドするだけです。
例として</p>

<p>```ruby
  class Person</p>

<pre><code>def to_param
  "#{id}-#{name.parameterize}"
end
</code></pre>

<p>  end</p>

<p>  #controller
  @person = Person.find(1)
  # => #<Person id: 1, name: "Donald E. Knuth"></p>

<p>  #view
  &lt;%= link_to(@person.name, person_path(@person)) %>
  # => <a href="http://kinopyo.github.com/person/1-donald-e-knuth">Donald E. Knuth</a></p>

<p>```
上記のようにmodelクラスを修正するだけで、他の影響はないです。URL: '/person/1-kinopyo'と'/person/1'はどっちでも使えます。
<em>parameterize</em>はRailsのビルトインのメソッドでurlに使う文字列に変換してくれるんです。<strong>しかし日本語などは完全にブランクに変換するので要注意です。</strong></p>

<p>もしurlを"/person/kinopyo"のようにperson.nameにカスタムしたい場合はこれより少し複雑になります。興味のある方は下記リンク(英語)を参照してください。 <a href="http://augustl.heroku.com/blog/styling-rails-urls">http://augustl.heroku.com/blog/styling-rails-urls</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: a helper method shows the required mark]]></title>
    <link href="http://kinopyo.github.com/blog/rails-a-helper-method-shows-the-required-mark"/>
    <updated>2010-07-27T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/rails-a-helper-method-shows-the-required-mark</id>
    <content type="html"><![CDATA[<p>一つのHelperメソッドを作って、Modelに必須チェックが入ってるプロパティに対して必須マークの"# "を出力します。</p>

<p>まずapplicaton_helperにmark_requiredのメソッドを作ります。第一引数にはオブジェクト、第二引数はそのクラスのプロパティを渡します。</p>

<p>```ruby</p>

<h1>application_helper.rb</h1>

<p>def mark_required(object, attribute)
  "# " if object.class.validators_on(attribute).map(&amp;:class).include? ActiveModel::Validations::PresenceValidator
end</p>

<p>```</p>

<p>viewのerbには下記のように@userインスタンス変数と:nameを渡します。もしUserモデルに:nameに対して必須バリデーションが存在すれば必須マークが出力されます。</p>

<p>```ruby
  <div class="field"></p>

<pre><code>&lt;%= f.label :name %&gt;&lt;%=mark_required(@user, :name) %&gt;&lt;br /&gt;
&lt;%= f.text_field :name %&gt;
</code></pre>

<p>  </div></p>

<p>```</p>

<p>参考リンク：<a href="http://railscasts.com/episodes/211-validations-in-rails-3">http://railscasts.com/episodes/211-validations-in-rails-3</a></p>

<h2>20110704更新</h2>

<p>もしhtmlタグも一緒に出力したいときは、タグがエスケープされてしまいます。</p>

<p>```ruby</p>

<p>module ApplicationHelper
  def mark_required(object, attribute)</p>

<pre><code>mark = "&lt;span class='require_mark'&gt;# &lt;/span&gt;"
mark if object.class.validators_on(attribute).map(&amp;:class).include? ActiveModel::Validations::PresenceValidator
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>```ruby
  <div class="field"></p>

<pre><code>&lt;%= f.label :name %&gt;&lt;%=raw mark_required(@user, :name) %&gt;&lt;br /&gt;
&lt;%= f.text_field :name %&gt;
</code></pre>

<p>  </div></p>

<p>```</p>

<p>この場合はrawを書けばエスケープされずにちゃんとHTMLタグが出力します。</p>

<h1>中文</h1>

<p>我们将创建一个Helper方法来输出"# "表示必须项目。
（原谅我这蹩脚的汉语，实在是不知道这些术语用中文该怎么叫）</p>

<p>首先在application_helper里创建一个叫mark_required的方法。他的第一个参数为对象，第二个参数接收的是对象的属性。</p>

<p>```ruby</p>

<h1>application_helper.rb</h1>

<p>def mark_required(object, attribute)
  "# " if object.class.validators_on(attribute).map(&amp;:class).include? ActiveModel::Validations::PresenceValidator
end</p>

<p>```</p>

<p>然后在View里我们只要把@user和:name传过去即可。如果你的User Model对:name进行了必须验证(presence validator)，"# "就会显示出来。</p>

<p>```ruby
  <div class="field"></p>

<pre><code>&lt;%= f.label :name %&gt;&lt;%= mark_required(@user, :name) %&gt;&lt;br /&gt;
&lt;%= f.text_field :name %&gt;
</code></pre>

<p>  </div></p>

<p>```</p>

<p>链接：<a href="http://railscasts.com/episodes/211-validations-in-rails-3">http://railscasts.com/episodes/211-validations-in-rails-3</a></p>

<h1>English</h1>

<p>Let's make a helper method that shows a required mark "# " when the attribute of the object has a presence validator.</p>

<p>First, create a mark_required method in the application_helper, pass the object as 1st parameter, the attribute as the second one.</p>

<p>```ruby</p>

<h1>application_helper.rb</h1>

<p>def mark_required(object, attribute)
  "# " if object.class.validators_on(attribute).map(&amp;:class).include? ActiveModel::Validations::PresenceValidator
end</p>

<p>```</p>

<p>Then, just call the custom method in the erb view file. In this sample we pass the @user instance variable and the :name attribute symbol. So if your User model has a presence validator on the :name attribute, the required-mark "# " will show up.</p>

<p>```ruby
  <div class="field"></p>

<pre><code>&lt;%= f.label :name %&gt;&lt;%= mark_required(@user, :name) %&gt;&lt;br /&gt;
&lt;%= f.text_field :name %&gt;
</code></pre>

<p>  </div></p>

<p>```</p>

<p>I learned from this site：<a href="http://railscasts.com/episodes/211-validations-in-rails-3">http://railscasts.com/episodes/211-validations-in-rails-3</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: How to create a custom validate method]]></title>
    <link href="http://kinopyo.github.com/blog/rails-how-to-create-a-custom-validate-method"/>
    <updated>2010-07-25T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/rails-how-to-create-a-custom-validate-method</id>
    <content type="html"><![CDATA[<p><a href="http://railscasts.com/episodes/211-validations-in-rails-3">http://railscasts.com/episodes/211-validations-in-rails-3</a>で学んだ技です。
Rails 3.0 beta4を利用しています。</p>

<p>カスタムバリデーションメソッドを作成する方法を紹介します。
こんなコードがあるとします。Userモデルのemailに対して妥当性チェックは普通こう書きます。</p>

<p>```ruby
class User &lt; ActiveRecord::Base
  validates :email,  :format => { :with => /\A(*<sup>@\s]+)@((?:[-a-z0-9]+.)+[a-z*{2,})\Z/i</sup> }
end</p>

<p>```</p>

<p>ここの:format => の部分を抽出してemail_validateというバリデーションメソッドを作ります。</p>

<h2>方法</h2>

<p>libフォルダにemail_format_validator.rbというファイルを新規作成します。</p>

<p>```ruby</p>

<h1>lib/email_format_validator.rb</h1>

<p>class EmailFormatValidator &lt; ActiveModel::EachValidator
  def validate_each(object, attribute, value)</p>

<pre><code>unless value =~ /\A(*^@\s]+)@((?:[-a-z0-9]+\.)+[a-z*{2,})\Z/i
  object.errors*attribute] &lt;&lt; (options[:message* || "is invalid")
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>そしてUser.rbのソースを下記のように修正します。</p>

<p>```ruby</p>

<h1>User.rb</h1>

<p>class User &lt; ActiveRecord::Base
  validates :email, :email_format => true
end</p>

<p>```</p>

<p>:email_formatは自動的にEmailFormatValidatorにマッピングします。</p>

<h1>中文</h1>

<p>从这里学到的东西：<a href="http://railscasts.com/episodes/211-validations-in-rails-3">http://railscasts.com/episodes/211-validations-in-rails-3</a>，算是作个笔记吧。
我用的是Rails 3.0 beta4。
假设你有一个User Model，要对期email属性尽兴验证。</p>

<p>```ruby
class User &lt; ActiveRecord::Base
  validates :email,  :format => { :with => /\A(*<sup>@\s]+)@((?:[-a-z0-9]+.)+[a-z*{2,})\Z/i</sup> }
end</p>

<p>```</p>

<p>这里用:format =>的一窜代码显得很不美观，我们就把这段代码抽出来单独做成一个方法。</p>

<h2>方法</h2>

<p>在lib文件夹下创建email_format_validator.rb的文件。</p>

<p>```ruby</p>

<h1>lib/email_format_validator.rb</h1>

<p>class EmailFormatValidator &lt; ActiveModel::EachValidator
  def validate_each(object, attribute, value)</p>

<pre><code>unless value =~ /\A(*^@\s]+)@((?:[-a-z0-9]+\.)+[a-z*{2,})\Z/i
  object.errors*attribute] &lt;&lt; (options[:message* || "is invalid")
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>然后修改User.rb，使用我们新建的方法:email_format</p>

<p>```ruby</p>

<h1>User.rb</h1>

<p>class User &lt; ActiveRecord::Base
  validates :email, :email_format => true
end</p>

<p>```</p>

<p>注意这里的:email_format会自动去寻找EmailFormatValidator这个class。</p>

<h1>English</h1>

<p>I learned this from here: <a href="http://railscasts.com/episodes/211-validations-in-rails-3">http://railscasts.com/episodes/211-validations-in-rails-3</a>
In this post, I'll introduce how to make a custom validate methods.Actually it's a kind of memo for me.
BTW, I'm using Rails 3.0 beta4.</p>

<p>Let's say you have a User model that contains a email property to validate. In common case it maybe written like this:</p>

<p>```ruby
class User &lt; ActiveRecord::Base
  validates :email,  :format => { :with => /\A(*<sup>@\s]+)@((?:[-a-z0-9]+.)+[a-z*{2,})\Z/i</sup> }
end</p>

<p>```</p>

<p>So we will extract the :format => part to a custom validate method called email_validate.</p>

<h2>Solution</h2>

<p>Create a file in the lib folder, named email_format_validator.rb</p>

<p>```ruby</p>

<h1>lib/email_format_validator.rb</h1>

<p>class EmailFormatValidator &lt; ActiveModel::EachValidator
  def validate_each(object, attribute, value)</p>

<pre><code>unless value =~ /\A(*^@\s]+)@((?:[-a-z0-9]+\.)+[a-z*{2,})\Z/i
  object.errors*attribute] &lt;&lt; (options[:message* || "is invalid")
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>And change User model like this:</p>

<p>```ruby</p>

<h1>User.rb</h1>

<p>class User &lt; ActiveRecord::Base
  validates :email, :email_format => true
end</p>

<p>```</p>

<p>Note that the :email_format symbol is refer to EmailFormatValidator class automatically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はてなブックマークエントリをブログに設置]]></title>
    <link href="http://kinopyo.github.com/blog/setup-blogparts-hatena-bookmark-entry"/>
    <updated>2010-07-21T00:00:00+09:00</updated>
    <id>http://kinopyo.github.com/blog/setup-blogparts-hatena-bookmark-entry</id>
    <content type="html"><![CDATA[<p><a href="http://b.hatena.ne.jp/guide/blogparts">http://b.hatena.ne.jp/guide/blogparts</a>にて自分のサイトの人気エントリーをブログパーツとして設置できます。
手順にしたがってブログのURLを入力して簡単の設定を行ったあとは貼り付けるコードが生成されるため、それをブログにコピペすればOKです。</p>

<p>できたらこんな感じです。なぜか画像が暗くなっちゃいました。
{% img http://www.kinopyo.com/blog/wp-content/uploads/2010/07/hatena-bookmark-entry.jpg hatena-bookmark-entry %}</p>
]]></content>
  </entry>
  
</feed>
